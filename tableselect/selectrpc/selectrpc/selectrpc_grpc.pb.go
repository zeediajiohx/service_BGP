// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: selectrpc.proto

package selectrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Selectrpc_Ping_FullMethodName = "/selectrpc.Selectrpc/Ping"
)

// SelectrpcClient is the client API for Selectrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SelectrpcClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type selectrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSelectrpcClient(cc grpc.ClientConnInterface) SelectrpcClient {
	return &selectrpcClient{cc}
}

func (c *selectrpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Selectrpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SelectrpcServer is the server API for Selectrpc service.
// All implementations must embed UnimplementedSelectrpcServer
// for forward compatibility
type SelectrpcServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSelectrpcServer()
}

// UnimplementedSelectrpcServer must be embedded to have forward compatible implementations.
type UnimplementedSelectrpcServer struct {
}

func (UnimplementedSelectrpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSelectrpcServer) mustEmbedUnimplementedSelectrpcServer() {}

// UnsafeSelectrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SelectrpcServer will
// result in compilation errors.
type UnsafeSelectrpcServer interface {
	mustEmbedUnimplementedSelectrpcServer()
}

func RegisterSelectrpcServer(s grpc.ServiceRegistrar, srv SelectrpcServer) {
	s.RegisterService(&Selectrpc_ServiceDesc, srv)
}

func _Selectrpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SelectrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Selectrpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SelectrpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}


// Selectrpc_ServiceDesc is the grpc.ServiceDesc for Selectrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Selectrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "selectrpc.Selectrpc",
	HandlerType: (*SelectrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Selectrpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "selectrpc.proto",
}
